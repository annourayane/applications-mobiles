{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { UsernameContext, TokenContext } from \"../Context/Context\";\nimport TodoItem from \"../components/TodoItem\";\nimport { styles } from \"../styles/styledetail\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar API_URL = 'http://graphql.unicaen.fr:4000';\nvar GET_TODOS_FOR_TODOLIST_QUERY = `\nquery Todos($where: TodoWhere) {\n  todos(where: $where) {\n    id\n    content\n    done\n    belongsTo {\n      title\n    }\n  }\n}\n`;\nvar ADD_TODO_MUTATION = `\nmutation CreateTodos($input: [TodoCreateInput!]!) {\n  createTodos(input: $input) {\n    todos {\n      id\n      done\n      content\n    }\n  }\n}\n`;\nvar UPDATE_TODO_MUTATION = `\nmutation UpdateTodos($update: TodoUpdateInput, $where: TodoWhere) {\n  updateTodos(update: $update, where: $where) {\n    todos {\n      id\n      done\n      content\n    }\n  }\n}\n`;\nvar DELETE_TODO_MUTATION = `\nmutation DeleteTodo($where: TodoWhere) {\n  deleteTodos(where: $where) {\n    nodesDeleted\n  }\n}\n`;\nexport default function TodoListDetailsScreen(_ref) {\n  var route = _ref.route;\n  var _route$params = route.params,\n    todoListId = _route$params.todoListId,\n    title = _route$params.title;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    todos = _useState2[0],\n    setTodos = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newTodoText = _useState4[0],\n    setNewTodoText = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errorMessage = _useState6[0],\n    setErrorMessage = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useContext = useContext(TokenContext),\n    _useContext2 = _slicedToArray(_useContext, 1),\n    token = _useContext2[0];\n  var fetchTodosForTodoList = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setLoading(true);\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: GET_TODOS_FOR_TODOLIST_QUERY,\n            variables: {\n              where: {\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        setTodos(jsonResponse.data.todos || []);\n        setErrorMessage('');\n      } catch (error) {\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchTodosForTodoList() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var addTodo = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (newTodoText.trim() === '') return;\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: ADD_TODO_MUTATION,\n            variables: {\n              input: [{\n                content: newTodoText,\n                done: false,\n                belongsTo: {\n                  connect: {\n                    where: {\n                      id: todoListId\n                    }\n                  }\n                }\n              }]\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        setNewTodoText('');\n        yield fetchTodosForTodoList();\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    });\n    return function addTodo() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var toggleTodoDone = function () {\n    var _ref4 = _asyncToGenerator(function* (todoId, done) {\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: UPDATE_TODO_MUTATION,\n            variables: {\n              update: {\n                done: done\n              },\n              where: {\n                id: todoId,\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        yield fetchTodosForTodoList();\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    });\n    return function toggleTodoDone(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var tousTodosDone = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: UPDATE_TODO_MUTATION,\n            variables: {\n              update: {\n                done: true\n              },\n              where: {\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        yield fetchTodosForTodoList();\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    });\n    return function tousTodosDone() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var tousTodosNotDone = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: UPDATE_TODO_MUTATION,\n            variables: {\n              update: {\n                done: false\n              },\n              where: {\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        yield fetchTodosForTodoList();\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    });\n    return function tousTodosNotDone() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var tachesTermines = function () {\n    var _ref7 = _asyncToGenerator(function* () {\n      setLoading(true);\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: GET_TODOS_FOR_TODOLIST_QUERY,\n            variables: {\n              where: {\n                done: true,\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        setTodos(jsonResponse.data.todos || []);\n        setErrorMessage('');\n      } catch (error) {\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function tachesTermines() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var tachesNonTermines = function () {\n    var _ref8 = _asyncToGenerator(function* () {\n      setLoading(true);\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: GET_TODOS_FOR_TODOLIST_QUERY,\n            variables: {\n              where: {\n                done: false,\n                belongsTo: {\n                  id: todoListId\n                }\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        setTodos(jsonResponse.data.todos || []);\n        setErrorMessage('');\n      } catch (error) {\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function tachesNonTermines() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var deleteTodo = function () {\n    var _ref9 = _asyncToGenerator(function* (todoId) {\n      try {\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            query: DELETE_TODO_MUTATION,\n            variables: {\n              where: {\n                id: todoId\n              }\n            }\n          })\n        });\n        var jsonResponse = yield response.json();\n        if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n        yield fetchTodosForTodoList();\n      } catch (error) {\n        setErrorMessage(error.message);\n      }\n    });\n    return function deleteTodo(_x3) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var completedTodosCount = todos.filter(function (todo) {\n    return todo.done;\n  }).length;\n  var totalTodosCount = todos.length;\n  useEffect(function () {\n    fetchTodosForTodoList();\n  }, [todoListId]);\n  return _jsx(ImageBackground, {\n    source: require(\"../assets/todoooo.png\"),\n    style: styles.background,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: title\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: newTodoText,\n        onChangeText: setNewTodoText,\n        placeholder: \"Ajouter une nouvelle tache\"\n      }), _jsxs(View, {\n        style: styles.buttonRow,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: addTodo,\n          disabled: !newTodoText.trim(),\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Ajouter\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: tousTodosDone,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Marquer Tout Termine\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: tousTodosNotDone,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Marquer Tout Non Termine\"\n          })\n        })]\n      }), _jsxs(View, {\n        style: styles.buttonRow,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: fetchTodosForTodoList,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Afficher Tout\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: tachesTermines,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Voir Termines\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: tachesNonTermines,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Voir Non Termines\"\n          })\n        })]\n      }), _jsxs(Text, {\n        style: styles.counter,\n        children: [completedTodosCount, \" / \", totalTodosCount, \" Taches Terminees\"]\n      }), _jsx(View, {\n        style: styles.progressBarContainer,\n        children: _jsx(View, {\n          style: [styles.progressBarFill, {\n            width: `${totalTodosCount === 0 ? 0 : completedTodosCount / totalTodosCount * 100}%`\n          }]\n        })\n      }), loading ? _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\"\n      }) : _jsx(FlatList, {\n        data: todos,\n        keyExtractor: function keyExtractor(item) {\n          return item.id.toString();\n        },\n        renderItem: function renderItem(_ref10) {\n          var item = _ref10.item;\n          return _jsx(TodoItem, {\n            todo: item,\n            onToggle: function onToggle() {\n              return toggleTodoDone(item.id, !item.done);\n            },\n            onDelete: function onDelete() {\n              return deleteTodo(item.id);\n            }\n          });\n        },\n        ListEmptyComponent: _jsx(Text, {\n          style: styles.emptyMessage,\n          children: \"Aucune tache a afficher.\"\n        })\n      }), errorMessage ? _jsx(Text, {\n        style: styles.error,\n        children: errorMessage\n      }) : null]\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","useContext","View","Text","FlatList","StyleSheet","TextInput","Button","ActivityIndicator","TouchableOpacity","ImageBackground","UsernameContext","TokenContext","TodoItem","styles","jsx","_jsx","jsxs","_jsxs","API_URL","GET_TODOS_FOR_TODOLIST_QUERY","ADD_TODO_MUTATION","UPDATE_TODO_MUTATION","DELETE_TODO_MUTATION","TodoListDetailsScreen","_ref","route","_route$params","params","todoListId","title","_useState","_useState2","_slicedToArray","todos","setTodos","_useState3","_useState4","newTodoText","setNewTodoText","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","loading","setLoading","_useContext","_useContext2","token","fetchTodosForTodoList","_ref2","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","query","variables","where","belongsTo","id","jsonResponse","json","errors","Error","message","data","error","apply","arguments","addTodo","_ref3","trim","input","content","done","connect","toggleTodoDone","_ref4","todoId","update","_x","_x2","tousTodosDone","_ref5","tousTodosNotDone","_ref6","tachesTermines","_ref7","tachesNonTermines","_ref8","deleteTodo","_ref9","_x3","completedTodosCount","filter","todo","length","totalTodosCount","source","require","style","background","children","container","value","onChangeText","placeholder","buttonRow","button","onPress","disabled","buttonText","counter","progressBarContainer","progressBarFill","width","size","color","keyExtractor","item","toString","renderItem","_ref10","onToggle","onDelete","ListEmptyComponent","emptyMessage"],"sources":["/home/annou231/Documents/Licence 3/github/react/applications-mobiles/react/Screen/TodoListDetailsScreen.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { View, Text, FlatList, StyleSheet, TextInput, Button, ActivityIndicator, TouchableOpacity, ImageBackground } from 'react-native';\nimport { UsernameContext, TokenContext } from '../Context/Context';\nimport TodoItem from '../components/TodoItem'; // Assurez-vous que TodoItem est importe\nimport { styles } from '../styles/styledetail'; \n\nconst API_URL = 'http://graphql.unicaen.fr:4000';\n\n// requete GraphQL pour recuperer les Todos (taches) d'une TodoList\nconst GET_TODOS_FOR_TODOLIST_QUERY = `\nquery Todos($where: TodoWhere) {\n  todos(where: $where) {\n    id\n    content\n    done\n    belongsTo {\n      title\n    }\n  }\n}\n`;\n\n//creer une tache dans une todoliste\n\n// requete GraphQL pour ajouter une nouvelle Todo\nconst ADD_TODO_MUTATION = `\nmutation CreateTodos($input: [TodoCreateInput!]!) {\n  createTodos(input: $input) {\n    todos {\n      id\n      done\n      content\n    }\n  }\n}\n`;\n\n// requete GraphQL pour mettre a jour une Todo\nconst UPDATE_TODO_MUTATION = `\nmutation UpdateTodos($update: TodoUpdateInput, $where: TodoWhere) {\n  updateTodos(update: $update, where: $where) {\n    todos {\n      id\n      done\n      content\n    }\n  }\n}\n`;\n\n// requete GraphQL pour supprimer une Todo\nconst DELETE_TODO_MUTATION = `\nmutation DeleteTodo($where: TodoWhere) {\n  deleteTodos(where: $where) {\n    nodesDeleted\n  }\n}\n`;\n\nexport default function TodoListDetailsScreen({ route }) {\n  const { todoListId, title } = route.params;\n  const [todos, setTodos] = useState([]);  //liste des taches \n  const [newTodoText, setNewTodoText] = useState('');  //titre de la nouvellet tache \n  const [errorMessage, setErrorMessage] = useState('');\n  const [loading, setLoading] = useState(false);  //inidcateur de chargement \n  const [token] = useContext(TokenContext);  //recupere le token de connexion \n\n  //recupere les todos d'une liste specifique \n\n  const fetchTodosForTodoList = async () => {\n    setLoading(true); //demarre le chargement \n    try {\n      //\n      const response = await fetch(API_URL, { //fetch : envoie une requete a une URL\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: GET_TODOS_FOR_TODOLIST_QUERY,\n          variables: { where: { belongsTo: { id: todoListId } } },\n        }),\n      });\n\n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      setTodos(jsonResponse.data.todos || []);/**la requete a reussi renvoie \n                                              les taches contenue dans l'objet data \n                                              et donc on met a jour les taches */\n      setErrorMessage(''); \n    } catch (error) {\n      setErrorMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new Todo\n  const addTodo = async () => {\n    if (newTodoText.trim() === '') return;//si la chaine evide ne rien faire \n\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: ADD_TODO_MUTATION,\n          variables: {\n            input: [{\n              content: newTodoText, /**parametre pour \n                                        creer la tache  */\n              done: false,\n              belongsTo: { connect: { where: { id: todoListId } } } //association de cette tache a une todolis\n            }],\n          },\n        }),\n      });\n\n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      setNewTodoText(''); //vider l'input apres l'ajout de de la tache \n      await fetchTodosForTodoList(); // met a jour la liste des taches \n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n\n  // bascule l'etat du  done d'une tache \n  const toggleTodoDone = async (todoId, done) => {\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: UPDATE_TODO_MUTATION,\n          variables: { \n            update: { done }, //  la mise a jour \n            where: { id: todoId, belongsTo: { id: todoListId } } //specifier le todo  \n          },\n        }),\n      });\n      \n      //reponse de l'api \n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      await fetchTodosForTodoList(); //rafraichit la todolist pour afficher la mise a jour \n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n\n\n  // Fonction pour marquer tous les todos comme termines\n  const tousTodosDone = async () => {\n  try {\n    const response = await fetch(API_URL, { //envoie une requete \n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n      body: JSON.stringify({\n        query: UPDATE_TODO_MUTATION,\n        variables: { \n          update: { done: true },\n          where: { belongsTo: { id: todoListId } } // tou les todos \n        },\n      }),\n    });\n\n    const jsonResponse = await response.json();\n    if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n    // Mettre a jour la liste après la modification avec les nouveautés \n    await fetchTodosForTodoList(); \n  } catch (error) {\n    setErrorMessage(error.message);\n  }\n  };\n\n\n   // Fonction pour marquer tous les todos comme non termines\n   const tousTodosNotDone = async () => {\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: UPDATE_TODO_MUTATION,\n          variables: { \n            update: { done: false }, \n            where: { belongsTo: { id: todoListId } }\n          },\n        }),\n      });\n  \n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n  \n      // Mettre a jour la liste après la modification\n      await fetchTodosForTodoList(); \n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n    };\n\n  // fonction pour afficher que les todos termines \n  \n  const tachesTermines = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: GET_TODOS_FOR_TODOLIST_QUERY,\n          variables: { where: { done : true , belongsTo: { id: todoListId } } },\n        }),\n      });\n\n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      setTodos(jsonResponse.data.todos || []);\n      setErrorMessage(''); // Reset error message on successful fetch\n    } catch (error) {\n      setErrorMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  // fonction pour afficher que les todos non termines \n  \n  const tachesNonTermines = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: GET_TODOS_FOR_TODOLIST_QUERY,\n          variables: { where: { done : false , belongsTo: { id: todoListId } } },\n        }),\n      });\n\n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      setTodos(jsonResponse.data.todos || []);\n      setErrorMessage(''); // Reset error message on successful fetch\n    } catch (error) {\n      setErrorMessage(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete a Todo\n  const deleteTodo = async (todoId) => {\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\n        body: JSON.stringify({\n          query: DELETE_TODO_MUTATION,\n          variables: { where: { id: todoId } },// id du todo a supprimer \n        }),\n      });\n\n      const jsonResponse = await response.json();\n      if (jsonResponse.errors) throw new Error(jsonResponse.errors[0].message);\n\n      await fetchTodosForTodoList(); // Refresh the Todo list\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  // Calcul du nombre de taches terminees et du total\n  const completedTodosCount = todos.filter(todo => todo.done).length;\n  const totalTodosCount = todos.length;\n\n\n\n  useEffect(() => {\n    fetchTodosForTodoList();\n  }, [todoListId]);  //a chaque fois que l'id de la todoListe change  la fonction recupere les nouvelles donnees \n                               \n  return (\n    <ImageBackground \n      source={require('../assets/todoooo.png')}\n      style={styles.background}\n    >\n      <View style={styles.container}>\n        <Text style={styles.title}>{title}</Text>\n  \n        <TextInput\n          style={styles.input}\n          value={newTodoText}\n          onChangeText={setNewTodoText} //a chaque modif du text on appelle la fonction \n          placeholder=\"Ajouter une nouvelle tache\"\n        />\n\n        <View style={styles.buttonRow}>\n          <TouchableOpacity style={styles.button} onPress={addTodo} disabled={!newTodoText.trim()}>\n            <Text style={styles.buttonText}>Ajouter</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.button} onPress={tousTodosDone}>\n            <Text style={styles.buttonText}>Marquer Tout Termine</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.button} onPress={tousTodosNotDone}>\n            <Text style={styles.buttonText}>Marquer Tout Non Termine</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.buttonRow}>\n          <TouchableOpacity style={styles.button} onPress={fetchTodosForTodoList}>\n            <Text style={styles.buttonText}>Afficher Tout</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.button} onPress={tachesTermines}>\n            <Text style={styles.buttonText}>Voir Termines</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.button} onPress={tachesNonTermines}>\n            <Text style={styles.buttonText}>Voir Non Termines</Text>\n          </TouchableOpacity>\n        </View>\n\n        <Text style={styles.counter}>\n          {completedTodosCount} / {totalTodosCount} Taches Terminees\n        </Text>\n        <View style={styles.progressBarContainer}>\n        <View\n        style={[\n          styles.progressBarFill,\n          { width: `${totalTodosCount === 0 ? 0 : (completedTodosCount / totalTodosCount) * 100}%` },\n        ]}\n        />\n        </View>\n\n        {loading ? (\n          <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n        ) : (\n          <FlatList  //liste deroulante \n            data={todos}\n            keyExtractor={(item) => item.id.toString()}//fournit une cle pour chaque todo selon son id \n            renderItem={({ item }) => (\n              <TodoItem\n                todo={item}\n                onToggle={() => toggleTodoDone(item.id, !item.done)}\n                onDelete={() => deleteTodo(item.id)}\n              />\n            )}\n            ListEmptyComponent={<Text style={styles.emptyMessage}>Aucune tache a afficher.</Text>}\n          />\n        )}\n\n        {errorMessage ? <Text style={styles.error}>{errorMessage}</Text> : null}\n      </View>\n    </ImageBackground>\n  );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}